<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ASP.NET Hacker</title>
  <link href="http://asp.net-hacker.rocks/"/>
  <link type="application/atom+xml" rel="self" href="http://asp.net-hacker.rocks/atom.xml"/>
  <updated>2015-12-02T07:10:44.2051017+01:00</updated>
  <id>http://asp.net-hacker.rocks/</id>
  <author>
    <name>Jürgen Gutsch</name>
    <email>juergen@gutsch-online.de</email>
  </author>

  
  <entry>
    <id>http://asp.net-hacker.rocks/_drafts/2015/12/03/ineta-germany.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/_drafts/2015/12/03/ineta-germany.html"/>
    <title>INETA Germany</title>
    <updated>2015-12-03T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/ineta-deutschland-logo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After many years being the heads of the &lt;a href=&quot;http://ineta-deutschland.de/&quot;&gt;INETA Germany&lt;/a&gt;, Lars Keller and Karim El-Jed, will leave the INETA Germany. The reason is, that Lars is working for Microsoft Germany since November 1st and he wants to ensure that the INETA will stay independent from Microsoft. Also the co-lead Karim will focus more on supporting his own .NET user group.&lt;/p&gt;
&lt;p&gt;This means the INETA needed two new heads and Lars found some new.&lt;/p&gt;
&lt;p&gt;Ulrike Stirnweiss will be the new co-lead of INETA Germany. And I write this post because I have one more reason than to only write about the news: I will be the new lead and I&apos;m pretty proud to work with Uli to support the German .NET user groups with the speaker bureau and with budget to pay travel costs of the registered speakers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe you read about that INETA North America will quit until the end of 2015. At the beginning of November this Year, I talked to their lead. The main reason why they will shut down is, that there seems to be no need to support the user groups in this way. It seems the North American user groups and the available speakers are well connected and they are managing all that stuff by their own. This in general is pretty cool, but the INETA North America is not longer needed if it is like this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will keep the INETA Germany alive and hopefully do a little more to support the German user groups and the German .NET community in general. Also INETA Europe will stay alive to provide the European speaker bureau.&lt;/p&gt;
&lt;p&gt;Currently I have some Ideas I will discuss with Uli and I got a few pretty cool ideas by Lars, to improve the support for the German user groups and make the INETA Germany a little more viewable in the .NET Community.&lt;/p&gt;
&lt;p&gt;For now we will keep the current jobs as defined by Lars and Karim. That means Uli will be responsible for all things around the website, marketing, and so on and I will continue with Lars Tasks: Being responsive for the Speakers Bureau, the user groups and the sponsoring.&lt;/p&gt;
&lt;p&gt;At the End of this post I have to say Thank You to some guys.&lt;/p&gt;
&lt;p&gt;Thanks to Lars and Karim, who will support us in the first few months being a INETA lead. :)&lt;/p&gt;
&lt;p&gt;Thanks to Torsten Weber who supports us in the back-end, hosting the website, mail servers, and so on. This makes this job a lot easier. :)&lt;/p&gt;
&lt;p&gt;Thanks to our current sponsor Microsoft, which is also keeping the speaker bureau alive with the annual sponsoring. :)&lt;/p&gt;
&lt;p&gt;If you want to be a sponsor of the INETA Germany to support the German user groups and the German .NET community please drop me an note. I&apos;ll send you detailed information about the benefits of being a sponsor.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/_drafts/2015/12/03/using-pretzel.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/_drafts/2015/12/03/using-pretzel.html"/>
    <title>Using Pretzel</title>
    <updated>2015-12-03T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;The first time I played around with pretzel was more than a year ago. Since than I tried to find a new blog system what is flexible, lightweight, what supports offline editing and runs on my favorite hosing platform: On Microsoft Azure.&lt;/p&gt;
&lt;p&gt;Pretzel is a Jekyll like blogging system, which uses the same template engine and the same Markdown syntax. Pretzel adds some additional features like Azure support and a Razor template engine. I use the liquid engine which is also used in Jekyll. Almost like Jekyll it is creating a static website based on that template engine and the Markdown contents.&lt;/p&gt;
&lt;p&gt;To install Pretzel locally, you just need to use Chocolatey:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;choco install pretzel -y
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Just a view days ago they released a new version 0.3.0, which is not yet deployed to Chocolatey. I downloaded the latest release and copied the bits to the Chocolatey install folder, which is &lt;code&gt;C:\tools\pretzel\&lt;/code&gt; in my case. This versions contains important big fixes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After Pretzel is installed you can easily start baking a pretzel blog. Just create a working folder somewhere on your machine and type&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;pretzel create --azure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command creates a new pretzel blog. That argument &lt;code&gt;--azure&lt;/code&gt; adds support to bake/compile pretzel blogs directly on a Azure Webiste.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pretzel/create.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The contents of your folder should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pretzel/createfolder.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;That&apos;s all to create a new blog. The blog sources, the posts and the templates are inside the _source folder:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pretzel/insidesource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now lets show you how it looks like in the browser. To start the blog locally you need to &lt;strong&gt;taste&lt;/strong&gt; the Pretzel blog:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;pretzel taste --drafts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the argument &lt;code&gt;--drafts&lt;/code&gt; to also see the drafted posts. The command &lt;code&gt;taste&lt;/code&gt; starts a small web server listening to &lt;code&gt;localhost:8080&lt;/code&gt; and opens the default browser where you can start using the blog.&lt;/p&gt;
&lt;p&gt;If it&apos;s all fine you can &lt;strong&gt;bake&lt;/strong&gt; your Pretzel blog&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;pretzel bake
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command creates a folder called &lt;code&gt;_site&lt;/code&gt; inside the inside the &lt;code&gt;_source&lt;/code&gt; folder with the compiled blog inside. This is the baked Pretzel blog which is a static website, build with the templates and the posts and pages written in markdown. You can put the contents of this folder to any web server.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;The idea was to have the blog under Git source control and automatic deploy it to the Azure website. I use GitHub to host the repository and I linked that repository to the Azure website to automatic deploy it every time I push changes to the repository. I didn&apos;t use the argument &lt;code&gt;--azure&lt;/code&gt; to create my blog, because the idea was to just push the compiled blog every time I change something or every time I create a new blog post. This means I only had the folder &lt;code&gt;_site&lt;/code&gt; under source control. This works really great, because there is nothing special. Only the compiled static web was pushed and deployed.&lt;/p&gt;
&lt;p&gt;But this wasn&apos;t a good idea and I had some problems with this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Markdown contents and the templates are not under source control&lt;/li&gt;
&lt;li&gt;I need to bake the Pretzel blog before I can push.&lt;/li&gt;
&lt;li&gt;Because the Markdown is not on GitHub pull requests are made on the compiled web and I need to merge on GitHub AND locally in the Markdown contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using the argument &lt;code&gt;--azure&lt;/code&gt; while creating the Pretzel blog adds solution and a dummy project to the blog folder. The Solution also contains a website project which points to the &lt;code&gt;_site&lt;/code&gt; folder. The dummy project contains an empty class and a post build command which just bakes the Pretzel blog:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Target Name=&amp;quot;AfterBuild&amp;quot;&amp;gt;
	&amp;lt;Exec Command=&amp;quot;pretzel.exe bake -d _source&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every time I push changes to the repository the Azure website pulls the changes, compiles the dummy project, executes that command and than some Azure-Kudu-magic happens: Kudu copies the contents of the website project to the wwwroot folder of the Azure website. It does exactly what I wan to have. If I call the Azure website within the browser I get the expected result.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BTW: In the current version 0.3.0 the argument &lt;code&gt;--azure&lt;/code&gt; doesn&apos;t work completely correct, because it only copies the pretzel.exe to the blog folder. Since they changed the output to deploy also some additional libraries, all the depended libraries also need to be copied to the root&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pretzel/shimcomplete.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This looks a bit messy, but it works. They need to ILMerge all the libraries or they need to fix the &lt;code&gt;--azure&lt;/code&gt; argument&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next step to do is to git ignore the contents of the folder _site and the contents of the folder _drafts if you don&apos;t want to publish drafts to a public repository.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/2015/12/02/NuGet-3-3.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/2015/12/02/NuGet-3-3.html"/>
    <title>Microsoft Fixed the NuGet Package Explorer with the Version 3.3</title>
    <updated>2015-12-02T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;in the summer this year the NuGet Package Explorer got an update, which changes the UI completely. This new UI wasn&apos;t really intuitive to use and confuses many users.&lt;/p&gt;
&lt;p&gt;With the Update 1 of Visual Studio 2015 MIcrosoft also delivers an update of the NuGet Package Explorer. Now the UI is pretty much cleaner and easier to understand. There are still some things to do, but if you compare to the previews UI this is much better.&lt;/p&gt;
&lt;p&gt;The first thing you will see are the new tabs in the left upper area. Here you can change the list to browse all or all found packages, you can view the installed packages and now you have a clean list of the packages which have new versions available:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/tabs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, there are the number of updates shown in the third tab. Also the selection of the package source is easily done in the right upper area, where you also able to access the NuGet option:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/sources.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you take a look at the package list, there is another pretty cool feature. If there is a package found which delivers exactly the same thing as an Bower package does, you will see a small message with a link in it. This message tells you that you should use Bower to install this package. The link opens up the new Bower package manager. Bower is the cool package manager which should be used to add client side libraries to web projects:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/usebower.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you go the updates by clicking the Updates tab, you&apos;ll see another nice thing. Now you can update as many packages as you want. You can use a checkbox on the left side of each package to select the packages you want to install. In the past it only was possible to update one or all packages:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/update.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;On the right side of each package in that list, Microsoft added one to two action buttons to quick do something with that package. Depending on which tab you are. You can quick install in the &amp;quot;Browse&amp;quot; tab, quick uninstall on the &amp;quot;Installed&amp;quot; tab or both uninstall or update on the &amp;quot;Updates&amp;quot; tab:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/actionbuttons.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The NuGet Package Explorer is divided into three areas: The heading area with the tabs, the search, the package sources, a list area on the left with the list of packages and its action buttons and a kind of a summary area on the right where you will see actions and summary information about the currently selected package. The actions are completely are more detailed as with the action buttons in the list. E. g. you are able to update to a specific version, instead of the latest version only. You will see the dependencies, project and license links, descriptions and so on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The only thing what is not really on the right place are the options in the summary area. This is wrong because this options are not specific to the selected package, but some more global. From my perspective this options should be moved to the options dialog:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/options.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;What do you thing? Update your Visual Studio to Update 1 and tell me your opinion about the new UI of the NuGet Package Explorer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/nuget33/packagexplorer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m very happy about this changes, even if I use this tool less than before, because to project.json files in DNX libraries are more comfortable from my point of view. ;)&lt;/p&gt;
&lt;p&gt;By the way: There is a much more detailed blog post about the new Package Explorer and many more new features available on &lt;a href=&quot;http://blog.nuget.org/20151118/nuget-3-3.html&quot;&gt;http://blog.nuget.org/20151118/nuget-3-3.html&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/2015/12/01/vs2015u1-typescript17.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/2015/12/01/vs2015u1-typescript17.html"/>
    <title>VS 2015 Update 1, TypeScript 1.7 and some more</title>
    <updated>2015-12-01T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;Yesterday, it was something like an announcement day. Let&apos;s have a look to the news from Redmond:&lt;/p&gt;
&lt;h2&gt;Visual Studio 2015 Update 1&lt;/h2&gt;
&lt;p&gt;This is what the most of us are waiting for: Microsoft released the Update 1 of Visual Studio 2015. There many improvements added to the IDE, with the debugging and navigation. See the detailed description in this blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/visualstudio/archive/2015/11/30/visual-studio-update-1-rtm.aspx&quot;&gt;http://blogs.msdn.com/b/visualstudio/archive/2015/11/30/visual-studio-update-1-rtm.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2015/11/30/what-s-new-in-visual-studio-update-1-for-net-managed-languages.aspx&quot;&gt;http://blogs.msdn.com/b/dotnet/archive/2015/11/30/what-s-new-in-visual-studio-update-1-for-net-managed-languages.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TFS 2015 Update 1&lt;/h2&gt;
&lt;p&gt;Brian Harry announced the availability of TFS 2015 Update 1, which includes a lot of new things and a few bug fixes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/bharry/archive/2015/11/30/vs-2015-update-1-and-tfs-2015-update-1-are-available.aspx&quot;&gt;http://blogs.msdn.com/b/bharry/archive/2015/11/30/vs-2015-update-1-and-tfs-2015-update-1-are-available.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This update is also available for TFS 2015 Express.&lt;/p&gt;
&lt;h2&gt;.NET Framework 4.6.1&lt;/h2&gt;
&lt;p&gt;Along with the Update 1 of Visual Studio 2015, Microsoft released .NET 4.6.1 with some improvements and big fixes in WPF and SQL Server connectivity, RyuJIT, GC and WCF:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2015/11/30/net-framework-4-6-1-is-now-available.aspx&quot;&gt;http://blogs.msdn.com/b/dotnet/archive/2015/11/30/net-framework-4-6-1-is-now-available.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TypeScript 1.7&lt;/h2&gt;
&lt;p&gt;Also the TypeSript team announced a new version. They highlighted to support for async and aweit in the new version 1.7:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/typescript/archive/2015/11/30/announcing-typescript-1-7.aspx&quot;&gt;http://blogs.msdn.com/b/typescript/archive/2015/11/30/announcing-typescript-1-7.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Azure SDK 2.8.1 for .NET&lt;/h2&gt;
&lt;p&gt;Another thing what was released yesterday, is the Azure SDK 2.8.1 for .NET. See Brady Gasters blog post for more details about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/announcing-azure-sdk-2-8-1-for-net/&quot;&gt;https://azure.microsoft.com/en-us/blog/announcing-azure-sdk-2-8-1-for-net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/_drafts/2015/12/01/dnx-vs-uwp.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/_drafts/2015/12/01/dnx-vs-uwp.html"/>
    <title>DNX libraries vs. UWP libraries</title>
    <updated>2015-12-01T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;Universal Windows Platform (UWP) libraries and DNX libraries are almost equal, they use the same new project type based on a project.json configuration file. Both project types are using NuGet to reference libraries. In fact these libraries are equal, except one small thing. DNX Libraries are creating NuGet Packages on build/publish and UWP libraries are creating unpacked DLLs.&lt;/p&gt;
&lt;p&gt;If you want to migrate your library to .NET Core, you can one of those project types. You only need to decide whether to create only the DLLs or to create NuGet Packages. In Both cases you are able to be compatible to .NET Core, UWP, or any other Platform or framework.&lt;/p&gt;
&lt;h2&gt;Really?&lt;/h2&gt;
&lt;p&gt;Yes, it is like this. :) In Visual Studio 2015 I created a solution with two projects. One of them is a UWP library and the other one is a DNX library:
&lt;img src=&quot;/img/core-vs-uwp/projects.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;They look almost similar, but let&apos;s have a look at the project.json files. This is the project.json of the DNX library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsonp&quot;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-*&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;ClassLibrary5 Class Library&amp;quot;,
  &amp;quot;authors&amp;quot;: [ &amp;quot;Juergen&amp;quot; ],
  &amp;quot;tags&amp;quot;: [ &amp;quot;&amp;quot; ],
  &amp;quot;projectUrl&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;licenseUrl&amp;quot;: &amp;quot;&amp;quot;,

  &amp;quot;frameworks&amp;quot;: {
    &amp;quot;net451&amp;quot;: { },
    &amp;quot;dotnet5.4&amp;quot;: {
      &amp;quot;dependencies&amp;quot;: {
        &amp;quot;Microsoft.CSharp&amp;quot;: &amp;quot;4.0.1-beta-23516&amp;quot;,
        &amp;quot;System.Collections&amp;quot;: &amp;quot;4.0.11-beta-23516&amp;quot;,
        &amp;quot;System.Linq&amp;quot;: &amp;quot;4.0.1-beta-23516&amp;quot;,
        &amp;quot;System.Runtime&amp;quot;: &amp;quot;4.0.21-beta-23516&amp;quot;,
        &amp;quot;System.Threading&amp;quot;: &amp;quot;4.0.11-beta-23516&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is the project.json of the UWP library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsonp&quot;&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;Microsoft.NETCore.UniversalWindowsPlatform&amp;quot;: &amp;quot;5.0.0&amp;quot;
  },
  &amp;quot;frameworks&amp;quot;: {
    &amp;quot;uap10.0&amp;quot;: {}
  },
  &amp;quot;runtimes&amp;quot;: {
    &amp;quot;win10-arm&amp;quot;: {},
    &amp;quot;win10-arm-aot&amp;quot;: {},
    &amp;quot;win10-x86&amp;quot;: {},
    &amp;quot;win10-x86-aot&amp;quot;: {},
    &amp;quot;win10-x64&amp;quot;: {},
    &amp;quot;win10-x64-aot&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the DNX libaries, you can also have a &amp;quot;dependency&amp;quot; item in the root to specify dependencies which can be used in both frameworks. Let&apos;s create a DNX library which supports UWP:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsonp&quot;&gt;
&amp;quot;frameworks&amp;quot;: {
  &amp;quot;net451&amp;quot;: { },
  &amp;quot;dotnet5.4&amp;quot;: {
    &amp;quot;dependencies&amp;quot;: {
      &amp;quot;Microsoft.CSharp&amp;quot;: &amp;quot;4.0.1-beta-23516&amp;quot;,
      &amp;quot;System.Collections&amp;quot;: &amp;quot;4.0.11-beta-23516&amp;quot;,
      &amp;quot;System.Linq&amp;quot;: &amp;quot;4.0.1-beta-23516&amp;quot;,
      &amp;quot;System.Runtime&amp;quot;: &amp;quot;4.0.21-beta-23516&amp;quot;,
      &amp;quot;System.Threading&amp;quot;: &amp;quot;4.0.11-beta-23516&amp;quot;
    }
  },
  &amp;quot;uap10.0&amp;quot;: {
    &amp;quot;dependencies&amp;quot;: {
      &amp;quot;Microsoft.NETCore.UniversalWindowsPlatform&amp;quot;: &amp;quot;5.0.0&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I added the dependency directly to the specific framework, because this guy will not be compatible with the other frameworks. This library will restore the missing packages when you save the project.json&lt;/p&gt;
&lt;p&gt;I&apos;m also able to add .NET Core support to the UWP library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsonp&quot;&gt;&amp;quot;frameworks&amp;quot;: {
  &amp;quot;uap10.0&amp;quot;: {
    &amp;quot;dependencies&amp;quot;: {
      &amp;quot;Microsoft.NETCore.UniversalWindowsPlatform&amp;quot;: &amp;quot;5.0.0&amp;quot;
    }
  },
  &amp;quot;dotnet5.4&amp;quot;: {
    &amp;quot;dependencies&amp;quot;: {
      &amp;quot;Microsoft.CSharp&amp;quot;: &amp;quot;4.0.1-beta-23516&amp;quot;,
      &amp;quot;System.Collections&amp;quot;: &amp;quot;4.0.11-beta-23516&amp;quot;,
      &amp;quot;System.Linq&amp;quot;: &amp;quot;4.0.1-beta-23516&amp;quot;,
      &amp;quot;System.Runtime&amp;quot;: &amp;quot;4.0.21-beta-23516&amp;quot;,
      &amp;quot;System.Threading&amp;quot;: &amp;quot;4.0.11-beta-23516&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The missing NuGet Packages will be restored, if you build this library. By the way: There already are conditional compiler symbols defined in the Build options to switch between .NET Core and UWP specific implementations:
&lt;img src=&quot;/img/core-vs-uwp/uwp-build-options.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;#if NETFX_CORE
        // access .NET Core specific APIs here
#endif

#if WINDOWS_UWP
        // access UWP specific APIs here
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While migrating LightCore to DNX Projects I used this to differ between .NET Framework and .NET Core specific implementations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;        public void InjectProperties(object instance)
        {
#if !DNXCORE50
            instance
                .GetType()
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty)
                .Where(this._validPropertiesSelector)
                .ForEach(p =&amp;gt; p.SetValue(instance, this.Resolve(p.PropertyType), null));
#else
            instance
                .GetType()
                .GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(_validPropertiesSelector)
                .ForEach(p =&amp;gt; p.SetValue(instance, Resolve(p.PropertyType), null));
#endif
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With this knowledge in mind it makes much more sense to migrate your library projects to DNX projects or to UWP projects to make your library compatible to many more platforms. Using this project types it is pretty simple to provide your features to much more platforms with a single code base.&lt;/p&gt;
&lt;p&gt;In the past I used multiple project files with shared code files to create libraries for more than one .NET Framework. Now I only need to add the additional framework to the project.json.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/2015/11/25/viewcomponents-aspnet5.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/2015/11/25/viewcomponents-aspnet5.html"/>
    <title>View Components in ASP.NET 5</title>
    <updated>2015-11-25T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;One of the nicest new features in ASP.NET 5 is the ViewComponent. This is a kind of a &apos;mini MVC&apos; inside the MVC application which can be used like partial Views. ViewComponents are like partial Views with an own controller, almost comparable with a UserControl in ASP.NET WebForms.&lt;/p&gt;
&lt;p&gt;Use cases are multiple reused components of a web application. That means all things that must not be managed by the current controller action. Let&apos;s use a Blog as an example, which has some more elements like menus, tag lists, link lists, archive overviews, etc. The data of these elements can be passed via the current actions to the view, but this needs to be done in every single action and produces a lot of duplicate code.&lt;/p&gt;
&lt;p&gt;It would be nice if the controller actions only have to do one single task: fetching and passing blog posts to the view. All the other things should be done on other locations, to not mess up the controller actions.&lt;/p&gt;
&lt;p&gt;That&apos;s where the ViewComponents entering the stage.&lt;/p&gt;
&lt;h2&gt;Let me show you how ViewCompnents look like&lt;/h2&gt;
&lt;p&gt;First we need to create a simple class which derives from ViewComponent and which needs to have &amp;quot;ViewCompoennt&amp;quot; as a sufix. E. g. &amp;quot;Top20TagsViewComponent&amp;quot;:	&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class Top20TagsViewComponent : ViewComponent 
{ 
    private readonly ITagService _tagService; 

    public Top20TagsViewComponent(ITagService tagService) 
    { 
        _tagService = tagService; 
    } 

    public IViewComponentResult Invoke() 
    { 
         var tags = _tagService.LoadTop20Tags(); 
         var models = tags.Select( 
            new TagViewModel 
            { 
                Id = tag.Id, 
                Name = tag.Name 
            }); 
        return View(models); 
    } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The method Invoke almost looks like a Action in a usual Controller, which creates and returns a View. The used TagService is injected with the default IoC. Because is available everywhere in ASP.NET 5, you can access everything what accessible with a usual Controller.&lt;/p&gt;
&lt;p&gt;The View is pretty common:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-aspnet&quot;&gt;@model IEnumerable&amp;lt;DotNetFn.ViewComponents.TagViewModel&amp;gt;

@if (Model.Any()) 
{ 
	&amp;lt;ul&amp;gt; 
        @foreach (var tag in Tags) 
        { 
            &amp;lt;li&amp;gt; 
                [@tag.Id] @tag.Name 
            &amp;lt;/li&amp;gt; 
        } 
    &amp;lt;/ul&amp;gt; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only the location where the View needs to be saved is a bit special. You need to save the default View with the name &lt;code&gt;Default.cshtml&lt;/code&gt; in a folder, which is named like the ViewComponent without the suffix inside &lt;code&gt;/Views/Shared/Components/&lt;/code&gt; Our ViewComponent is stored in &lt;code&gt;/Shared/Components/Top20Tags/Default.cshtml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The default name is Default.cshtml, but you can use any other name, if you pass that name to the View:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;return View(&amp;quot;TheNicerName&amp;quot;, models);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this you are able to switch the Templates inside the ViewComponent, if it is needed.&lt;/p&gt;
&lt;p&gt;The described Component will be used almost as a partial View:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-aspnet&quot;&gt;@Component.Invoke(&amp;quot;TopTags&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Passing arguments&lt;/h2&gt;
&lt;p&gt;A very interesting thing is to pass arguments to a ViewComponent. Maybe you want to change the number of Tags to display, depending on where we want to use this Component.&lt;/p&gt;
&lt;p&gt;We only need to extend the Invoke method with one ore more arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public IViewComponentResult Invoke(int count)     
{ 
    var tags = _tagService.LoadTopTags().Take(count);     
    var models = tags.Select(tag =&amp;gt; 
        new TagViewModel 
        { 
            Id = tag.Id, 
            Name = tag.Name 
        }); 
     return View(models); 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we able to call the ViewComponent with that additional argument:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-aspnet&quot;&gt;@Component.Invoke(&amp;quot;TopTags&amp;quot;, 10);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Asynchronous ViewComponents&lt;/h2&gt;
&lt;p&gt;To support asynchronous Views, we can also use a asynchronous Invoke method instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public async Task&amp;lt;IViewComponentResult&amp;gt; InvokeAsync(int count)     
{ 
    var tags = await _tagService.LoadTopTags();     
    var models = tags.Select(=&amp;gt; 
        new TagViewModel 
        { 
            Id = tag.Id, 
            Name = tag.Name 
        }).Take(count); 
     return View(models); 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We only need to use await in the View to use this InvokeAsync:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-aspnet&quot;&gt;@await Component.InvokeAsync(&amp;quot;TopTags&amp;quot;, 10);
&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/2015/11/20/move-libraries-to-net-core.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/2015/11/20/move-libraries-to-net-core.html"/>
    <title>Moving .NET libraries to .NET Core</title>
    <updated>2015-11-20T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;At the MVP Summit 2015 &lt;a href=&quot;http://blog.der-albert.com/&quot;&gt;Albert Weinert&lt;/a&gt; told us that ASP.NET has a huge problem: Almost all of our favorite tools are not usable with .NET Core. Many unit test frameworks, IoC containers,  almost all mocking frameworks will not work with .NET Core and needs to be moved to DNX libraries to get portable. Additionally almost all mocking frameworks are based on the Castle.Core library, which also needs to be moved to be portable.&lt;/p&gt;
&lt;p&gt;Currently I&apos;m working at &lt;a href=&quot;http://lightcore.ch&quot;&gt;LightCore&lt;/a&gt; to make it compatible to .NET Core, to make the world a little better ;) Hopefully. This needs some steps to do. More details are in a separate blog post about &lt;a href=&quot;/2015/11/17/lightcore20.html&quot;&gt;LightCore 2.0&lt;/a&gt;. Because the unit tests of LightCore don&apos;t use mocking tools this was easier than expected.&lt;/p&gt;
&lt;p&gt;With this post I want to tell you, what you need to do to move your library to .NET Core. I will use the &apos;Simple Object Store&apos; to make a step by step tutorial. At the end my open source library will be compatible with .NET Core :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;But why should I do this? Is this future proof? Does the effort make sense?&lt;/h3&gt;
&lt;p&gt;At first I need to know that DNX projects (that&apos;s the name of the .NET Core libraries) are a kind of portable libraries. The only difference is that portable class libraries building a single assembly and DNX projects creating a NuGet package. All the other stuff is equal. This means the the libraries are compatible to many different platforms and frameworks. If I build a DNX library, I can use this library in .NET Core, .NET Framework, UWP and Mono. This should answer the questions above.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The current state of the Simple Object Store&lt;/h2&gt;
&lt;p&gt;Currently the solution includes many framework specific projects with linked source files to build against different Framework versions. This needs to be replaced with one single DNX project. I don&apos;t want to support frameworks lower than .NET 4.0 (Please tell me if you need a build for a lower version than 4.0.)&lt;/p&gt;
&lt;p&gt;That means I have four projects for the SimpleObjectStore and the same number of projects for the AzureStorageProviders. And I have two test projects, one for the main library and one for the providers library.&lt;/p&gt;
&lt;p&gt;The goal is to have four different libraries instead of 10.&lt;/p&gt;
&lt;h2&gt;Step 1: Convert the main library&lt;/h2&gt;
&lt;p&gt;In the Solution I remove the main library and create a new DNX library with the same name. I need to rename old the project folder before. I Add all the existing code files into the new DNX project After that I need to add the frameworks I want to support and to update the dependencies in the project.json to get the project building.&lt;/p&gt;
&lt;h2&gt;Step 2: Convert the providers library&lt;/h2&gt;
&lt;p&gt;To get the AzureStorageProviders library running on .NET Core I have to do exactly the same for as for the main library. Additionally I need to add a reference to the main library. To get the right reference I have to add a dependency to the main project without a version number. (If I would add a version number, the build look for an existing NuGet package on nuget.org)&lt;/p&gt;
&lt;h2&gt;Step 3: Converting the unit test projects&lt;/h2&gt;
&lt;p&gt;Currently I&apos;m using NUnit to test the SimpleObjectStore. I need to decide whether to change to Xunit or to use the new NUnit 3.0.0 portable build.&lt;/p&gt;
&lt;p&gt;I&apos;ll give the new NUnit a try. In the tutorial about using the portable build, they show the way to use a DNX console application to create a test project. I disagree with that. I would like to have a separate DNX console application as a NUnit runner. This should work in the same way as the Xunit runner. I just created it in a separate project.&lt;/p&gt;
&lt;p&gt;Because I have the separate runner I can use the same way as in Step 1 to create DNX libraries for the test projects. Additionally I add a reference to the NUnit runner and add a command called test, which runs the Runner and passes the current test library.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;commands&amp;quot;: {
	&amp;quot;test&amp;quot;: &amp;quot;nunit.runner.dnx&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I use the NUnit namespace because I want to contribute this runner to the NUnit project. I use it here as a kind of dog-fooding to test the runner.)&lt;/p&gt;
&lt;p&gt;If this is done, we need to get this projects compiled. I did this, by try and error, building, fixing, building, fixing, and so on... The old NUnit API is almost equal to the new NUnit 3.0.0 API and there is less to do than expected.&lt;/p&gt;
&lt;h2&gt;Step 4: Add a CI server&lt;/h2&gt;
&lt;p&gt;To get this compiled and published I also use AppVeyor as a favorite CI server i the same way as written in the &lt;a href=&quot;/2015/11/17/build-lightcore-with-appveyor.html&quot;&gt;last post about Building LightCore 2.0&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Final words&lt;/h2&gt;
&lt;p&gt;Hopefully this post will help you to make your libraries running on .NET Core and any other  platform and framework. As you can see this isn&apos;t really a big deal. You need to know some small things about DNX libraries to create packages which are targeting as many platforms as possible. From my point of view, with the new possibilities given by .NET Core it is really important to get ready to go the same way as Microsoft. Prepare your .NET libraries to get also used on Linux and Mac. That&apos;s pretty awesome. Have you really thought about that a few years ago? ;)&lt;/p&gt;
&lt;p&gt;A pretty detailed tutorial about how to move libraries to DNX was written by Marc Gravell: &lt;a href=&quot;http://blog.marcgravell.com/2015/11/the-road-to-dnx-part-1.html&quot;&gt;http://blog.marcgravell.com/2015/11/the-road-to-dnx-part-1.html&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/2015/11/19/build-lightcore-with-appveyor.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/2015/11/19/build-lightcore-with-appveyor.html"/>
    <title>AppVeyor: A simple build server for open source projects</title>
    <updated>2015-11-19T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;For LightCore 2.0 I would like to show the build state inside the GitHub repository. I could use my personal Jenkins build server on a Azure VM, because Jenkins also provides the build state, with a plug-in.&lt;/p&gt;
&lt;p&gt;But this seems to be the right moment to play around with AppVeyor:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ci.appveyor.com/project/JuergenGutsch/lightcore&quot;&gt;https://ci.appveyor.com/project/JuergenGutsch/lightcore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AppVeyor is a browser based SaaS (Software as a Service) application in the cloud. AppVeyor provides many useful features within a pretty simple, intuitive and clean UI. GitHub is completely integrated and it is really easy to create a build job for a GitHub project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-General.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The .NET Version Manager (DNVM) is already installed and you only need to figure out which run-time is used by default. I used the build output to see the results of the &amp;quot;dnvm&amp;quot; commands. Finally I choosed the way to install the needed beta-8 with the batch scripts, every time the build starts:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Environment.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;dnvm update-self
dnvm install 1.0.0-beta8 -a x86 -r coreclr -OS win 
dnvm alias lccoreclr 1.0.0-beta8 -a x86 -r coreclr -OS win 
dnvm install 1.0.0-beta8 -a x86 -r clr -OS win
dnvm alias lcclr 1.0.0-beta8 -a x86 -r clr -OS win
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the builds and the tests I also used the batch command mode with the following lines:&lt;/p&gt;
&lt;p&gt;Build:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Build.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;cd LightCore 
dnvm use lccoreclr 
dnu restore 
dnu build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Tests.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;cd ..\LightCore.Tests 
dnvm use lccoreclr 
dnu restore 
dnx test 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Show the build state&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally I&apos;m able to copy a small piece of MarkDown code, which I can use in the readme.md file in the GitHub repository to show the current build state:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Badge.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[![Build status](https://ci.appveyor.com/api/projects/status/et1fpjlmnsrkw3mv?svg=true)](https://ci.appveyor.com/project/JuergenGutsch/lightcore)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/et1fpjlmnsrkw3mv?svg=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it is pretty simple to use and handle AppVeyor. I&apos;m sure I&apos;ll also use AppVeyor for my other open source project, the &amp;quot;SimpleObjectStore&amp;quot;. But I need to move that library to .NET Core first. ;)&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/2015/11/17/lightcore20.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/2015/11/17/lightcore20.html"/>
    <title>LightCore 2.0</title>
    <updated>2015-11-17T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;p&gt;At the MVP Summit 2015 we had a Hackthon with the guys from the ASP.NET product group to support ASP.NET 5. There were Ideas to improve the documentation, to upgrade samples to the newest beta version or to upgrade older libraries to .NET Core.&lt;/p&gt;
&lt;p&gt;It was &lt;a href=&quot;http://blog.der-albert.com/&quot;&gt;Albert Weinert&lt;/a&gt; who asked me to move &lt;a href=&quot;http://lightcore.ch&quot;&gt;LightCore&lt;/a&gt; to .NET Core. The more I thought about this idea, the more I liked it. So I decided to move LightCore to .Net Core :)&lt;/p&gt;
&lt;p&gt;To change the main library wasn&apos;t a big deal. I simply created a new DNX library and added the existing code files to the new libraries. I had to solve only three small issues, which is explained a little later.&lt;/p&gt;
&lt;p&gt;The biggest effort was to change all the unit tests from NUnit to Xunit, because NUnit was unfortunately not compatible to .NET Core. While changing the test framework I also changed the assertions to FluentAssertion to be save in the future, if we need to change the the test framework again.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, with the version 3.0.0 NUnit supports .NET Core (Universal Windows Apps 10+, DNX Core 5+) &lt;a href=&quot;https://www.nuget.org/packages/NUnit/&quot;&gt;https://www.nuget.org/packages/NUnit/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Current status&lt;/h2&gt;
&lt;p&gt;In the new version I did a hard cut with Silverlight and the Compact Framework. I don&apos;t want to support this old frameworks. If the .NET core libraries are compatible with that two frameworks, this will only be by accident ;)&lt;/p&gt;
&lt;p&gt;This version will support .NET Core 5, UWP10, .NET Framework and Mono. ASP.NET 4.6 and ASP.NET 5 is also supported.&lt;/p&gt;
&lt;p&gt;The XAML-Reader is not available in .NET Core, which means the XAML configuration will only work in with .NET Framework. In .NET Core a JSON configuration should be used instead, which is additionally available for all other Frameworks. The configuration by code is still possible and is the recommended way to configure the IoC container.&lt;/p&gt;
&lt;p&gt;The old web integration will not be changed, to stay compatible to MVC 3 and 4. This library only uses the new .NET Framework version of the LightCore main library. Additionally we will add a ASP.NET 5 integration to replace the build in IoC with LightCore.&lt;/p&gt;
&lt;p&gt;The ThreadSingeltonLifecycle is currently not working in the .NET Core version, because System.Threading.Thread is not available in .NET Core. We need to find another solution to identify the current thread. This live-cycle only works in .NET Framework.&lt;/p&gt;
&lt;p&gt;In case of reflection to get the properties to inject, the BindingFlags.SetProperty is not available in .NET Core. This means there are possibly some performance issues, while fetching and validating the property setter.&lt;/p&gt;
&lt;p&gt;Another issue is the CommonServiceLocator, because the ServiceLocatorImplBase of the Microsoft.Practices.ServiceLocation is also not yet available in .NET Core. So the CommonServiceLocator is only working with .NET Framework. Maybe it is needed to build an own ServiceLocator.&lt;/p&gt;
&lt;p&gt;With the unit tests of LightCore.Configuration we had problems with three tests which were failing, if they are not running individually. This is because the Xunit tests where run in parallel and the RegistrationLoader in LightCore is not ThreadSave. This guy mus not be thread save, but we needed to wrap all tests with an lock statement which are using RegistrationLoader.Instance.Register() to solve that problem.&lt;/p&gt;
&lt;p&gt;A public build server is set up with AppVeyor, but we also need to integrate the other libraries into this build.&lt;/p&gt;
&lt;h2&gt;More ideas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Property injection should only work with an marker attribute to improve the performance&lt;/li&gt;
&lt;li&gt;Some users want to have the named instances back in LightCore. I believe we should add this feature again. It is  definitely not a nice pattern to use named instances, but as always in the real world we can&apos;t use all the nice patterns every time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Call for contributions&lt;/h2&gt;
&lt;p&gt;As already written, we need to change the web integrations and the samples, documentations and the performance tests, though. You are able to follow the current development process on the related feature branch: &lt;a href=&quot;https://github.com/juergengutsch/lightcore/tree/jg/portable&quot;&gt;https://github.com/juergengutsch/lightcore/tree/jg/portable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It would be pretty cool, if you would contribute some ideas, suggestions and issues directly on GitHub. Please also feel free to send us code contributions via pull requests :)&lt;/p&gt;
&lt;p&gt;We would like to make LightCore one of the best IoC containers for .NET Core :)&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/2015/11/15/myfirstpost.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/2015/11/15/myfirstpost.html"/>
    <title>My First Post with Pretzel</title>
    <updated>2015-11-15T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html">&lt;h2&gt;Bye Community Server, Hello Pretzel&lt;/h2&gt;
&lt;p&gt;I stop writing on &lt;a href=&quot;http://www.aspnetzone.de/blogs/juergengutsch/&quot;&gt;http://www.aspnetzone.de/blogs/juergengutsch/&lt;/a&gt; and changed the blog software to a more flexible and agile system based on &lt;a href=&quot;https://github.com/Code52/pretzel&quot;&gt;Pretzel&lt;/a&gt;. Pretzel is a Jekyll clone written in .NET using a funny API. You need to &apos;taste&apos; your blog to view your latest changes in your browser locally and you need to &apos;bake&apos; your Pretzel blog before delivering your changes to the server.&lt;/p&gt;
&lt;h2&gt;Markdown instead of Markup&lt;/h2&gt;
&lt;p&gt;Like Jekyll, you need to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; to write your blog posts for Pretzel. So, I also changed the offline editor to &lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad 2&lt;/a&gt;. Markdown helps me to focus on content, instead of formatting. E. g. with the old blog system I had to format the code blocks online in the system after publishing, because the Windows Live Writer didn&apos;t support the code formats of the system in the right way.&lt;/p&gt;
&lt;p&gt;In general, writing offline is one of the most important requirements I have to a blog system. Because I travel a lot with the train and the &amp;quot;Deutsche Bahn&amp;quot; (the German railway company) seems to be pretty incompatible with the internet ;)&lt;/p&gt;
&lt;h2&gt;Switching to English&lt;/h2&gt;
&lt;p&gt;I also switched to English, because I used to speak and to write English almost every day. And this is also a way to get more experience in writing and speaking English. Please feel free to send me notes and hints about spelling errors :)&lt;/p&gt;
&lt;p&gt;Hopefully this is also fine for the most of the German speaking readers of my blog. Currently I have around 1000 activities per day via the FeedBurner feed and around 400 views per day directly on the articles. If you are not happy about the English posts, please drop me a note. Maybe it is possible to share the contents also in German.&lt;/p&gt;
&lt;p&gt;From time to time I will translate the most important blog posts of the old system, to use it in the new system. I will select the specific posts by the number of reads.&lt;/p&gt;
&lt;h2&gt;This blog ...&lt;/h2&gt;
&lt;p&gt;... is still is not completely configured and there are some features I need to implement. Especially the Tags are currently disabled, because I need to hack around Pretzel a little bit to create tag overviews. Maybe I will arrange some things around the layout, colors and so on...&lt;/p&gt;
&lt;h2&gt;A very huge &amp;quot;Thank You&amp;quot; ...&lt;/h2&gt;
&lt;p&gt;... goes to &lt;strong&gt;Marian Gieseler&lt;/strong&gt;, a colleague of mine at the &lt;a href=&quot;http://yooapps.com&quot;&gt;YooApplications AG&lt;/a&gt; who creates the initial design of this blog. I&apos;m pretty happy with this layout and proud to present it to the world :)&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://asp.net-hacker.rocks/_drafts/2001/01/01/template.html</id>
    <link type="text/html" rel="alternate" href="http://asp.net-hacker.rocks/_drafts/2001/01/01/template.html"/>
    <title>template</title>
    <updated>2001-01-01T00:00:00+01:00</updated>
    <author>
      <name>Jürgen Gutsch</name>
      <uri>http://asp.net-hacker.rocks/</uri>
    </author>
    <content type="html"></content>
  </entry>
  
</feed>